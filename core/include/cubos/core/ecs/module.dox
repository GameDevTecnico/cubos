/// @dir
/// @brief @ref core-ecs module.

/// @namespace cubos::core::ecs
/// @brief @ref core-ecs module.
/// @ingroup core-ecs

/// @namespace cubos::core::ecs::impl
/// @brief Contains functions used internally by the implementation of the ECS.
///
/// Used to avoid cluttering the public namespace with implementation details.
///
/// @ingroup core-ecs

namespace cubos::core::ecs
{
    /// @defgroup core-ecs ECS
    /// @ingroup core
    /// @brief %Entity Component System library.
    ///
    /// This module is arguably the heart of the engine, as it provides a means to organize and
    /// manage the data and logic of both the engine and games built with it. It is, as of now, a
    /// bit of a mess. Most of the exposed types are internal to the documentation, and thus it can
    /// get hard to navigate (TODO #377).
    ///
    /// @note Check out the @ref features-ecs "ECS feature guide" for an in-depth explanation of
    /// what an ECS is and how it can be used.
    ///
    /// ## System argument types
    /// - `const R&` - used to read resource data of type @p R.
    /// - `R&` - used to write resource data of type @p R.
    /// - `const World&` - used to read the world directly (not recommended, ruins
    ///   parallelism, prefer @ref Commands).
    /// - @ref Write "World&" - used to write the world directly (not recommended, ruins
    ///   parallelism, prefer @ref Commands).
    /// - @ref Commands - used to queue entities to be created, destroyed and other operations.
    /// - @ref EventReader "EventReader<E>" - reads events of type @p E sent from other systems.
    /// - @ref EventWriter "EventWriter<E>" - sends events of type @p E to other systems.
    /// - @ref Query "Query<Args...>" - queries the world for entities which match its arguments.
    ///
    /// ## Query argument types
    /// - `const C&` - matches entities with the component @p C, read-only access.
    /// - `C&` - matches entities with the component @p C, write access.
    /// - `Opt<const C&>" - matches all entities, read-only access when the component @p C is present.
    /// - `Opt<C&>` - matches all entities, write access when the component @p C is present.
}
